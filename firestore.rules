rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default rule - deny access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection
    match /users/{userId} {
      // Allow users to read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow reading user profiles for other authenticated users
      allow read: if request.auth != null;
      
      // FCM tokens subcollection
      match /fcmTokens/{tokenId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Device tokens subcollection
      match /deviceTokens/{tokenId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Stats subcollection
      match /stats/{statId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Badges subcollection
      match /badges/{badgeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Achievements subcollection
      match /achievements/{achievementId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Venues collection
    match /venues/{venueId} {
      // Anyone authenticated can read venue details
      allow read: if request.auth != null;
      
      // Club owners and admins can create/update venues
      allow write: if request.auth != null && 
                  (('club-owner' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles) || 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Cities chat collection
    match /chat_cities/{cityId} {
      // Anyone authenticated can read city info
      allow read: if request.auth != null;
      // Only admins can create/update/delete cities
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    

    
    // Events collection
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      // Only admins can create/update/delete events
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Tickets collection
    match /tickets/{ticketId} {
      // Users can read their own tickets
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Users can create tickets
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only admins can update/delete tickets
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Saved events collection
    match /saved_events/{savedEventId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Added rules for promoters collection
    match /promoters/{promoterId} {
      // Anyone authenticated can read promoter details
      allow read: if request.auth != null;
      // Club owners and admins can manage promoters
      allow write: if request.auth != null && 
                  (('club-owner' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles) || 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Added rules for activity logs
    match /activity_logs/{logId} {
      // Anyone authenticated can read activity logs
      allow read: if request.auth != null;
      // Anyone authenticated can create activity logs
      allow create: if request.auth != null;
      // Only admins can update/delete logs
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Added rules for promo codes
    match /promo_codes/{codeId} {
      // Anyone authenticated can read promo codes
      allow read: if request.auth != null;
      // Club owners and admins can manage promo codes
      allow write: if request.auth != null && 
                  (('club-owner' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles) || 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Afterparties collection
    match /afterparties/{partyId} {
      // Anyone can read afterparty details (public access for App Store reviewers)
      allow read: if true;
      // Users can create their own afterparties
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      // DEMO MODE: Allow anonymous users to create demo parties
      allow create: if request.auth != null && 
                     request.auth.token.firebase.sign_in_provider == "anonymous" &&
                     request.resource.data.get('isDemoData', false) == true;
      // DEMO ACCOUNT: Allow demo account to create any parties (including demo parties)
      allow create: if request.auth != null && 
                     request.auth.token.email == "appstore.reviewer@bondfyr.demo";
      // DEMO ACCOUNT: Also allow demo account to delete any parties for cleanup
      allow delete: if request.auth != null && 
                     request.auth.token.email == "appstore.reviewer@bondfyr.demo";
      // Party host can update/delete their own afterparty
      allow update, delete: if request.auth != null && 
                             resource.data.userId == request.auth.uid;
      // Allow authenticated users to add themselves to guestRequests
      allow update: if request.auth != null && 
                     // Only allow updating guestRequests field
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['guestRequests']);
      // Allow authenticated users to update guestRequests and activeUsers for payment processing
      allow update: if request.auth != null && 
                     // Allow updating both fields for payment completion
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['guestRequests', 'activeUsers']);
    }
    
    // Party chat messages collection
    match /party_messages/{messageId} {
      // Anyone authenticated can read party messages
      allow read: if request.auth != null;
      // Users can create messages (permission checking handled in app logic)
      allow create: if request.auth != null;
      // System can create messages (for initial welcome message)
      allow create: if request.resource.data.userId == "system";
      // Users can only update/delete their own messages
      allow update, delete: if request.auth != null && 
                             resource.data.userId == request.auth.uid;
      // Allow system cleanup - any authenticated user can delete party messages
      // (This is safe because it's only called from within the app during party cleanup)
      allow delete: if request.auth != null;
    }
    
    // Party viewers collection (for viewer count tracking)
    match /party_viewers/{partyId} {
      // Anyone authenticated can read viewer count
      allow read: if request.auth != null;
      // Anyone authenticated can update viewer count
      allow write: if request.auth != null;
      // Allow system cleanup - any authenticated user can delete viewer records
      allow delete: if request.auth != null;
    }
    
    // Pending parties collection (for payment-first party creation)
    match /pendingParties/{partyId} {
      // Allow authenticated users to create pending parties
      allow create: if request.auth != null && 
                     request.resource.data.hostId == request.auth.uid;
      // Allow reading pending parties (for webhook processing)
      allow read: if true;
      // Allow webhook to delete after party creation
      allow delete: if true;
    }
    
    // Checkout mappings collection (for linking LemonSqueezy payments to parties)
    match /checkoutMappings/{checkoutId} {
      // Allow authenticated users to create checkout mappings
      allow create: if request.auth != null;
      // Allow reading mappings (for webhook processing)
      allow read: if true;
      // Allow webhook to delete after payment processing
      allow delete: if true;
    }
    
    // Wallets collection (for StoreKit listing credits)
    match /wallets/{userId} {
      // Users can read and write their own wallet
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
} 